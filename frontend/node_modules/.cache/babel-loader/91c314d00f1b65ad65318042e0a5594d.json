{"ast":null,"code":"import attributes from '../attributes.json';\nexport let Datatype; // PATIENTS and SUBGROUPS are added to attributes manually and have this values as datatype\n\n(function (Datatype) {\n  Datatype[\"date\"] = \"date\";\n  Datatype[\"int\"] = \"int\";\n  Datatype[\"float\"] = \"float\";\n  Datatype[\"code\"] = \"code\";\n  Datatype[\"subgroups\"] = \"SUBGROUPS\";\n  Datatype[\"patients\"] = \"PATIENTS\";\n})(Datatype || (Datatype = {}));\n\nconst attributeTooltips = {};\nattributes.forEach(attribute => {\n  attributeTooltips[attribute.attribute] = attribute.attributeTooltip;\n});\nexport const getTooltip = attribute => {\n  return attributeTooltips[attribute];\n};\nexport const filter = datatypes => {\n  return attributes.filter(attribute => Object.values(datatypes).findIndex(datatype => attribute.datatype === datatype) !== -1);\n};","map":{"version":3,"sources":["/Users/philippwegner/Desktop/UKB/git/PostIDSN-Viewer/src/services/Attributes.ts"],"names":["attributes","Datatype","attributeTooltips","forEach","attribute","attributeTooltip","getTooltip","filter","datatypes","Object","values","findIndex","datatype"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,oBAAvB;AAeA,WAAYC,QAAZ,C,CAQA;;WARYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAUZ,MAAMC,iBAA4C,GAAG,EAArD;AACAF,UAAU,CAACG,OAAX,CAAmBC,SAAS,IAAI;AAC9BF,EAAAA,iBAAiB,CAACE,SAAS,CAACA,SAAX,CAAjB,GAAyCA,SAAS,CAACC,gBAAnD;AACD,CAFD;AAIA,OAAO,MAAMC,UAAU,GAAIF,SAAD,IAA+B;AACvD,SAAOF,iBAAiB,CAACE,SAAD,CAAxB;AACD,CAFM;AAIP,OAAO,MAAMG,MAAM,GAAIC,SAAD,IAAwC;AAC5D,SAAOR,UAAU,CAACO,MAAX,CACLH,SAAS,IACPK,MAAM,CAACC,MAAP,CAAcF,SAAd,EAAyBG,SAAzB,CACEC,QAAQ,IAAIR,SAAS,CAACQ,QAAV,KAAuBA,QADrC,MAEM,CAAC,CAJJ,CAAP;AAMD,CAPM","sourcesContent":["import attributes from '../attributes.json';\n\nexport interface Attribute {\n  topic: string;\n  topicDescription: string;\n  umbrella: string;\n  umbrellaDescription: string;\n  attribute: string;\n  attributeDescription: string;\n  attributeTooltip: string;\n  datatype: string;\n  domain: string;\n  unit: string;\n}\n\nexport enum Datatype {\n  date = 'date',\n  int = 'int',\n  float = 'float',\n  code = 'code',\n  subgroups = 'SUBGROUPS',\n  patients = 'PATIENTS',\n}\n// PATIENTS and SUBGROUPS are added to attributes manually and have this values as datatype\n\nconst attributeTooltips: { [key: string]: string } = {};\nattributes.forEach(attribute => {\n  attributeTooltips[attribute.attribute] = attribute.attributeTooltip;\n});\n\nexport const getTooltip = (attribute: string): string => {\n  return attributeTooltips[attribute];\n};\n\nexport const filter = (datatypes: Datatype[]): Attribute[] => {\n  return attributes.filter(\n    attribute =>\n      Object.values(datatypes).findIndex(\n        datatype => attribute.datatype === datatype,\n      ) !== -1,\n  );\n};\n"]},"metadata":{},"sourceType":"module"}