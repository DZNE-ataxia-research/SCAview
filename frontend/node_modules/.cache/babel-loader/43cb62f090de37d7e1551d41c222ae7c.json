{"ast":null,"code":"var _jsxFileName = \"/idsn/git/July_22/PostIDSN-Viewer/src/containers/Controls.tsx\";\nimport React, { useState } from 'react';\nimport './Controls.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CardHeader from '@material-ui/core/CardHeader'; //import * as Attributes from '../services/Attributes_old';\n\nimport { Fit, Legend } from '../services/Backend';\nimport CloseIcon from '@material-ui/icons/Close';\nimport FormControl from '@material-ui/core/FormControl';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Alert from '@material-ui/lab/Alert'; // STRUCTURES\n\nexport let DiagramType;\n\n(function (DiagramType) {\n  DiagramType[DiagramType[\"Scatter\"] = 1] = \"Scatter\";\n  DiagramType[DiagramType[\"Histogram\"] = 2] = \"Histogram\";\n  DiagramType[DiagramType[\"Bar\"] = 3] = \"Bar\";\n  DiagramType[DiagramType[\"Timeline\"] = 4] = \"Timeline\";\n})(DiagramType || (DiagramType = {}));\n\nexport let Datatype;\n\n(function (Datatype) {\n  Datatype[\"date\"] = \"date\";\n  Datatype[\"int\"] = \"int\";\n  Datatype[\"float\"] = \"float\";\n  Datatype[\"code\"] = \"code\";\n  Datatype[\"subgroups\"] = \"SUBGROUPS\";\n  Datatype[\"patients\"] = \"PATIENTS\";\n})(Datatype || (Datatype = {}));\n\nvar Control;\n\n(function (Control) {\n  Control[Control[\"attX\"] = 0] = \"attX\";\n  Control[Control[\"attY\"] = 1] = \"attY\";\n  Control[Control[\"attC\"] = 2] = \"attC\";\n  Control[Control[\"dt\"] = 3] = \"dt\";\n  Control[Control[\"visit\"] = 4] = \"visit\";\n  Control[Control[\"followup\"] = 5] = \"followup\";\n  Control[Control[\"tolerance\"] = 6] = \"tolerance\";\n  Control[Control[\"fit\"] = 7] = \"fit\";\n  Control[Control[\"norm\"] = 8] = \"norm\";\n  Control[Control[\"stack\"] = 9] = \"stack\";\n  Control[Control[\"legend\"] = 10] = \"legend\";\n  Control[Control[\"bins\"] = 11] = \"bins\";\n})(Control || (Control = {}));\n\nexport let Visit; // CONFIG\n\n(function (Visit) {\n  Visit[\"all\"] = \"ALL\";\n  Visit[\"baseline\"] = \"BASELINE\";\n  Visit[\"follow\"] = \"FOLLOW\";\n})(Visit || (Visit = {}));\n\nconst diagramTypeOptions = [{\n  label: 'Scatter',\n  value: DiagramType.Scatter\n}, {\n  label: 'Histogram',\n  value: DiagramType.Histogram\n}, {\n  label: 'Bar',\n  value: DiagramType.Bar\n}, {\n  label: 'Timeline',\n  value: DiagramType.Timeline\n}];\nconst visitOptions = [{\n  label: 'All visits',\n  value: Visit.all\n}, {\n  label: 'First visit',\n  value: Visit.baseline\n}, {\n  label: 'Follow-up visits',\n  value: Visit.follow\n}];\nconst diagramControlParameters = {\n  [DiagramType.Scatter]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int, Datatype.code, Datatype.subgroups, Datatype.patients] //allow every datatype to be chosen in scatter\n\n    },\n    [Control.attY]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int, Datatype.code, Datatype.subgroups, Datatype.patients] //allow every datatype to be chosen in scatter\n\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [Datatype.subgroups, Datatype.patients, Datatype.float, Datatype.int, Datatype.code]\n    },\n    [Control.dt]: {\n      visible: true\n    },\n    [Control.visit]: {\n      visible: true\n    },\n    [Control.followup]: {\n      visible: true\n    },\n    [Control.tolerance]: {\n      visible: true\n    },\n    [Control.fit]: {\n      visible: true\n    },\n    [Control.norm]: {\n      visible: false\n    },\n    [Control.stack]: {\n      visible: false\n    },\n    [Control.legend]: {\n      visible: true\n    },\n    [Control.bins]: {\n      visible: false\n    }\n  },\n  [DiagramType.Histogram]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int]\n    },\n    [Control.attY]: {\n      visible: false,\n      datatypes: []\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [Datatype.subgroups, Datatype.patients, Datatype.code]\n    },\n    [Control.dt]: {\n      visible: true\n    },\n    [Control.visit]: {\n      visible: true\n    },\n    [Control.followup]: {\n      visible: true\n    },\n    [Control.tolerance]: {\n      visible: true\n    },\n    [Control.fit]: {\n      visible: false\n    },\n    [Control.norm]: {\n      visible: true\n    },\n    [Control.stack]: {\n      visible: true\n    },\n    [Control.legend]: {\n      visible: true\n    },\n    [Control.bins]: {\n      visible: true\n    }\n  },\n  [DiagramType.Bar]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Datatype.subgroups, Datatype.patients, Datatype.code]\n    },\n    [Control.attY]: {\n      visible: false,\n      datatypes: []\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [Datatype.subgroups, Datatype.patients, Datatype.code]\n    },\n    [Control.dt]: {\n      visible: true\n    },\n    [Control.visit]: {\n      visible: true\n    },\n    [Control.followup]: {\n      visible: true\n    },\n    [Control.tolerance]: {\n      visible: true\n    },\n    [Control.fit]: {\n      visible: false\n    },\n    [Control.norm]: {\n      visible: true\n    },\n    [Control.stack]: {\n      visible: true\n    },\n    [Control.legend]: {\n      visible: true\n    },\n    [Control.bins]: {\n      visible: false\n    }\n  },\n  [DiagramType.Timeline]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Datatype.date]\n    },\n    [Control.attY]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int]\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int, Datatype.code]\n    },\n    [Control.dt]: {\n      visible: true\n    },\n    [Control.visit]: {\n      visible: true\n    },\n    [Control.followup]: {\n      visible: true\n    },\n    [Control.tolerance]: {\n      visible: true\n    },\n    [Control.fit]: {\n      visible: true\n    },\n    [Control.norm]: {\n      visible: false\n    },\n    [Control.stack]: {\n      visible: false\n    },\n    [Control.legend]: {\n      visible: true\n    },\n    [Control.bins]: {\n      visible: false\n    }\n  }\n};\nexport const initialDiagramType = DiagramType.Scatter; // PROPS\n\nconst Controls = props => {\n  React.useEffect(() => {\n    onPropsChanged(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]); // HELPER (see second part below)\n\n  const filterItems = datatypes => {\n    return props.filter(datatypes);\n  }; // STATES\n  // dataState\n\n\n  const initialDataState = {\n    diagramType: initialDiagramType,\n    diagramControlParameter: diagramControlParameters[initialDiagramType],\n    attXData: filterItems(diagramControlParameters[initialDiagramType][Control.attX].datatypes || []),\n    attYData: filterItems(diagramControlParameters[initialDiagramType][Control.attY].datatypes || []),\n    attCData: filterItems(diagramControlParameters[initialDiagramType][Control.attC].datatypes || [])\n  };\n  const [dataState, setDataState] = useState(initialDataState);\n  const [currentBin, setCurrentBin] = useState(null); // HANDLERS\n\n  const onPropsChanged = () => {\n    if (props.controls && props.controls.type !== dataState.diagramType) {\n      onDiagramTypeChange(props.controls.type);\n    }\n  };\n\n  const onDiagramTypeChange = value => {\n    setDataState({\n      diagramType: value,\n      diagramControlParameter: diagramControlParameters[value],\n      attXData: filterItems(diagramControlParameters[value][Control.attX].datatypes || []),\n      attYData: filterItems(diagramControlParameters[value][Control.attY].datatypes || []),\n      attCData: filterItems(diagramControlParameters[value][Control.attC].datatypes || [])\n    });\n  }; // HELPER (see first part above)\n  // RENDER\n\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"configuration\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    subheader: \"Plot Configurations\",\n    action: /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      \"aria-label\": \"close\",\n      onClick: () => {\n        props.onClose();\n      },\n      className: \"grid__item--close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    className: \"configuration__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }\n  }, !props.controls ? /*#__PURE__*/React.createElement(Alert, {\n    severity: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 11\n    }\n  }, \"No plot selected\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }\n  }, \"Graph Data\"), /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 15\n    }\n  }, \"Plot type\"), /*#__PURE__*/React.createElement(Select, {\n    value: props.controls.type,\n    onChange: event => {\n      props.onControlsChanged(props.controls.identifier, {\n        type: event.target.value\n      });\n    },\n    label: \"Plot type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 15\n    }\n  }, diagramTypeOptions.map(diagramType => /*#__PURE__*/React.createElement(MenuItem, {\n    key: diagramType.value,\n    value: diagramType.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 19\n    }\n  }, diagramType.label)))), dataState.diagramControlParameter[Control.attX].visible && /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    options: dataState.attXData.sort((a, b) => -b.topic.localeCompare(a.topic)),\n    groupBy: option => option.topic,\n    getOptionLabel: option => option.attributeTooltip,\n    value: dataState.attXData.find(a => a.attribute === props.controls.attX) || null,\n    onChange: (_event, newValue) => {\n      props.onControlsChanged(props.controls.identifier, {\n        attX: (newValue === null || newValue === void 0 ? void 0 : newValue.attribute) || ''\n      });\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"X-coordinate attribute\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 17\n    }\n  })), dataState.diagramControlParameter[Control.attY].visible && /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    options: dataState.attYData.sort((a, b) => -b.topic.localeCompare(a.topic)),\n    groupBy: option => option.topic,\n    getOptionLabel: option => option.attributeTooltip,\n    value: dataState.attYData.find(a => a.attribute === props.controls.attY) || null,\n    onChange: (_event, newValue) => {\n      props.onControlsChanged(props.controls.identifier, {\n        attY: (newValue === null || newValue === void 0 ? void 0 : newValue.attribute) || ''\n      });\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Y-coordinate attribute\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 17\n    }\n  })), dataState.diagramControlParameter[Control.attC].visible && /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    options: dataState.attCData.sort((a, b) => -b.topic.localeCompare(a.topic)),\n    groupBy: option => option.topic,\n    getOptionLabel: option => option.attributeTooltip,\n    value: dataState.attCData.find(a => a.attribute === props.controls.attC) || null,\n    onChange: (_event, newValue) => {\n      props.onControlsChanged(props.controls.identifier, {\n        attC: (newValue === null || newValue === void 0 ? void 0 : newValue.attribute) || ''\n      });\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Color attribute\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 21\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 17\n    }\n  })), dataState.diagramControlParameter[Control.dt].visible && /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    fullWidth: true,\n    type: \"number\",\n    label: \"Time span of a visit (Days)\",\n    value: props.controls.dt || 0,\n    onChange: event => {\n      props.onControlsChanged(props.controls.identifier, {\n        dt: +event.target.value\n      });\n    },\n    InputProps: {\n      inputProps: {\n        min: 0\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 15\n    }\n  }), dataState.diagramControlParameter[Control.visit].visible && /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 17\n    }\n  }, \"Visit\"), /*#__PURE__*/React.createElement(Select, {\n    label: \"Visit\",\n    value: props.controls.visit,\n    onChange: event => {\n      const valueString = event.target.value;\n      let value = Visit.all;\n\n      switch (valueString) {\n        case 'BASELINE':\n          {\n            value = Visit.baseline;\n            break;\n          }\n\n        case 'FOLLOW':\n          {\n            value = Visit.follow;\n            break;\n          }\n      }\n\n      props.onControlsChanged(props.controls.identifier, {\n        visit: value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 17\n    }\n  }, visitOptions.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n    key: option.value,\n    value: option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 21\n    }\n  }, option.label)))), props.controls.visit === Visit.follow && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"followup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 15\n    }\n  }, dataState.diagramControlParameter[Control.followup].visible && /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    variant: \"outlined\",\n    label: \"Months from first visit\",\n    value: props.controls.followup || 0,\n    onChange: event => {\n      props.onControlsChanged(props.controls.identifier, {\n        followup: +event.target.value\n      });\n    },\n    InputProps: {\n      inputProps: {\n        min: 0\n      }\n    },\n    className: \"followup__months\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 19\n    }\n  }), dataState.diagramControlParameter[Control.tolerance].visible && /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    variant: \"outlined\",\n    label: \"+/- (Months)\",\n    value: props.controls.tolerance || 0,\n    onChange: event => {\n      props.onControlsChanged(props.controls.identifier, {\n        tolerance: +event.target.value\n      });\n    },\n    className: \"followup__tolerance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 13\n    }\n  }, \"Display Options\"), dataState.diagramControlParameter[Control.fit].visible && /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 17\n    }\n  }, \"Fit\"), /*#__PURE__*/React.createElement(Select, {\n    value: props.controls.fit,\n    onChange: event => {\n      //console.log(event.target.value);\n      props.onControlsChanged(props.controls.identifier, {\n        fit: event.target.value || Fit.none\n      });\n    },\n    label: \"fit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: Fit.none,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 19\n    }\n  }, \"none\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: Fit.regression,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 19\n    }\n  }, \"regression\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"switches\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 13\n    }\n  }, dataState.diagramControlParameter[Control.norm].visible && /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Switch, {\n      checked: props.controls.norm,\n      onChange: event => {\n        props.onControlsChanged(props.controls.identifier, {\n          norm: event.target.checked\n        });\n      },\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 21\n      }\n    }),\n    label: \"Normalize\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 17\n    }\n  }), dataState.diagramControlParameter[Control.stack].visible && /*#__PURE__*/React.createElement(FormControlLabel, {\n    control: /*#__PURE__*/React.createElement(Switch, {\n      checked: props.controls.stack,\n      onChange: event => {\n        props.onControlsChanged(props.controls.identifier, {\n          stack: event.target.checked\n        });\n      },\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 21\n      }\n    }),\n    label: \"Stack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 17\n    }\n  })), dataState.diagramControlParameter[Control.legend].visible && /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 17\n    }\n  }, \"Legend\"), /*#__PURE__*/React.createElement(Select, {\n    value: props.controls.legend,\n    onChange: event => {\n      props.onControlsChanged(props.controls.identifier, {\n        legend: event.target.value || Legend.none\n      });\n    },\n    label: \"Legend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: Legend.none,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 19\n    }\n  }, \"no\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: Legend.legend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 19\n    }\n  }, \"yes\"))), dataState.diagramControlParameter[Control.bins].visible && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slider\",\n    style: {\n      display: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    id: \"viewer-configuration-bin-acuteness-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 17\n    }\n  }, \"Bin acuteness\"), /*#__PURE__*/React.createElement(Slider, {\n    value: currentBin !== null ? currentBin : props.controls.bins || 0,\n    onChange: (event, newValue) => {\n      const value = newValue;\n      setCurrentBin(value);\n    },\n    onChangeCommitted: (event, newValue) => {\n      setCurrentBin(null);\n      const value = newValue;\n\n      if (value !== props.controls.bins) {\n        props.onControlsChanged(props.controls.identifier, {\n          bins: value\n        });\n      }\n    },\n    \"aria-labelledby\": \"viewer-configuration-bin-acuteness-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 17\n    }\n  })))));\n};\n\nexport default Controls;","map":{"version":3,"sources":["/idsn/git/July_22/PostIDSN-Viewer/src/containers/Controls.tsx"],"names":["React","useState","InputLabel","MenuItem","Select","FormControlLabel","Switch","Slider","Typography","TextField","Card","CardContent","IconButton","CardHeader","Fit","Legend","CloseIcon","FormControl","Autocomplete","Alert","DiagramType","Datatype","Control","Visit","diagramTypeOptions","label","value","Scatter","Histogram","Bar","Timeline","visitOptions","all","baseline","follow","diagramControlParameters","attX","visible","datatypes","float","int","code","subgroups","patients","attY","attC","dt","visit","followup","tolerance","fit","norm","stack","legend","bins","date","initialDiagramType","Controls","props","useEffect","onPropsChanged","filterItems","filter","initialDataState","diagramType","diagramControlParameter","attXData","attYData","attCData","dataState","setDataState","currentBin","setCurrentBin","controls","type","onDiagramTypeChange","onClose","event","onControlsChanged","identifier","target","map","sort","a","b","topic","localeCompare","option","attributeTooltip","find","attribute","_event","newValue","params","inputProps","min","valueString","none","regression","checked","display"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './Controls.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CardHeader from '@material-ui/core/CardHeader';\n//import * as Attributes from '../services/Attributes_old';\nimport { Fit, Legend } from '../services/Backend';\nimport CloseIcon from '@material-ui/icons/Close';\nimport FormControl from '@material-ui/core/FormControl';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Alert from '@material-ui/lab/Alert';\n\n// STRUCTURES\n\nexport enum DiagramType {\n  Scatter = 1,\n  Histogram = 2,\n  Bar = 3,\n  Timeline = 4,\n}\n\nexport enum Datatype {\n  date = 'date',\n  int = 'int',\n  float = 'float',\n  code = 'code',\n  subgroups = 'SUBGROUPS',\n  patients = 'PATIENTS',\n}\n\nexport interface Attribute {\n  topic: string;\n  topicDescription: string;\n  umbrella: string;\n  umbrellaDescription: string;\n  attribute: string;\n  attributeDescription: string;\n  attributeTooltip: string;\n  datatype: string;\n  domain: string;\n  unit: string;\n}\n\nenum Control {\n  attX,\n  attY,\n  attC,\n  dt,\n  visit,\n  followup,\n  tolerance,\n  fit,\n  norm,\n  stack,\n  legend,\n  bins,\n}\n\nexport interface ControlsState {\n  identifier: string;\n  type: DiagramType;\n  attX: string;\n  attY: string;\n  attC: string;\n  dt: number;\n  visit: Visit;\n  followup: number;\n  tolerance: number;\n  norm: boolean;\n  stack: boolean;\n  fit: Fit;\n  legend: Legend;\n  bins: number;\n}\n\nexport enum Visit {\n  all = 'ALL',\n  baseline = 'BASELINE',\n  follow = 'FOLLOW',\n}\n\n// CONFIG\n\nconst diagramTypeOptions = [\n  { label: 'Scatter', value: DiagramType.Scatter },\n  { label: 'Histogram', value: DiagramType.Histogram },\n  { label: 'Bar', value: DiagramType.Bar },\n  { label: 'Timeline', value: DiagramType.Timeline },\n];\n\nconst visitOptions = [\n  { label: 'All visits', value: Visit.all },\n  { label: 'First visit', value: Visit.baseline },\n  { label: 'Follow-up visits', value: Visit.follow },\n];\n\ntype DiagramControlParameter = {\n  [key in Control]: {\n    visible: boolean;\n    datatypes?: Datatype[];\n  };\n};\n\ntype DiagramControlParameters = {\n  [key in DiagramType]: DiagramControlParameter;\n};\n\nconst diagramControlParameters: DiagramControlParameters = {\n  [DiagramType.Scatter]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int, Datatype.code, Datatype.subgroups,\n        Datatype.patients], //allow every datatype to be chosen in scatter\n    },\n    [Control.attY]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int, Datatype.code, Datatype.subgroups,\n        Datatype.patients], //allow every datatype to be chosen in scatter\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [\n        Datatype.subgroups,\n        Datatype.patients,\n        Datatype.float,\n        Datatype.int,\n        Datatype.code,\n      ],\n    },\n    [Control.dt]: {\n      visible: true,\n    },\n    [Control.visit]: {\n      visible: true,\n    },\n    [Control.followup]: {\n      visible: true,\n    },\n    [Control.tolerance]: {\n      visible: true,\n    },\n    [Control.fit]: {\n      visible: true,\n    },\n    [Control.norm]: {\n      visible: false,\n    },\n    [Control.stack]: {\n      visible: false,\n    },\n    [Control.legend]: {\n      visible: true,\n    },\n    [Control.bins]: {\n      visible: false,\n    },\n  },\n  [DiagramType.Histogram]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int],\n    },\n    [Control.attY]: {\n      visible: false,\n      datatypes: [],\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [\n        Datatype.subgroups,\n        Datatype.patients,\n        Datatype.code,\n      ],\n    },\n    [Control.dt]: {\n      visible: true,\n    },\n    [Control.visit]: {\n      visible: true,\n    },\n    [Control.followup]: {\n      visible: true,\n    },\n    [Control.tolerance]: {\n      visible: true,\n    },\n    [Control.fit]: {\n      visible: false,\n    },\n    [Control.norm]: {\n      visible: true,\n    },\n    [Control.stack]: {\n      visible: true,\n    },\n    [Control.legend]: {\n      visible: true,\n    },\n    [Control.bins]: {\n      visible: true,\n    },\n  },\n  [DiagramType.Bar]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [\n        Datatype.subgroups,\n        Datatype.patients,\n        Datatype.code,\n      ],\n    },\n    [Control.attY]: {\n      visible: false,\n      datatypes: [],\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [\n        Datatype.subgroups,\n        Datatype.patients,\n        Datatype.code,\n      ],\n    },\n    [Control.dt]: {\n      visible: true,\n    },\n    [Control.visit]: {\n      visible: true,\n    },\n    [Control.followup]: {\n      visible: true,\n    },\n    [Control.tolerance]: {\n      visible: true,\n    },\n    [Control.fit]: {\n      visible: false,\n    },\n    [Control.norm]: {\n      visible: true,\n    },\n    [Control.stack]: {\n      visible: true,\n    },\n    [Control.legend]: {\n      visible: true,\n    },\n    [Control.bins]: {\n      visible: false,\n    },\n  },\n  [DiagramType.Timeline]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Datatype.date],\n    },\n    [Control.attY]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int],\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [Datatype.float, Datatype.int, Datatype.code],\n    },\n    [Control.dt]: {\n      visible: true,\n    },\n    [Control.visit]: {\n      visible: true,\n    },\n    [Control.followup]: {\n      visible: true,\n    },\n    [Control.tolerance]: {\n      visible: true,\n    },\n    [Control.fit]: {\n      visible: true,\n    },\n    [Control.norm]: {\n      visible: false,\n    },\n    [Control.stack]: {\n      visible: false,\n    },\n    [Control.legend]: {\n      visible: true,\n    },\n    [Control.bins]: {\n      visible: false,\n    },\n  },\n};\n\nexport const initialDiagramType: DiagramType = DiagramType.Scatter;\n\n// PROPS\n\ninterface Props {\n  controls: ControlsState;\n  onControlsChanged: (\n    identifier: string,\n    controls: Partial<ControlsState>,\n  ) => void;\n  onClose: () => void;\n  filter: (datatypes: Datatype[]) => Attribute[];\n}\n\nconst Controls: React.FunctionComponent<Props> = props => {\n  React.useEffect(() => {\n    onPropsChanged();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  // HELPER (see second part below)\n\n  const filterItems = (\n    datatypes: Datatype[],\n  ): Attribute[] => {\n    return props.filter(datatypes);\n  };\n\n  // STATES\n\n  // dataState\n  interface DataState {\n    diagramType: DiagramType;\n    diagramControlParameter: DiagramControlParameter;\n    attXData: Attribute[];\n    attYData: Attribute[];\n    attCData: Attribute[];\n  }\n  const initialDataState: DataState = {\n    diagramType: initialDiagramType,\n    diagramControlParameter: diagramControlParameters[initialDiagramType],\n    attXData: filterItems(\n      diagramControlParameters[initialDiagramType][Control.attX].datatypes ||\n        [],\n    ),\n    attYData: filterItems(\n      diagramControlParameters[initialDiagramType][Control.attY].datatypes ||\n        [],\n    ),\n    attCData: filterItems(\n      diagramControlParameters[initialDiagramType][Control.attC].datatypes ||\n        [],\n    ),\n  };\n  const [dataState, setDataState] = useState<DataState>(initialDataState);\n  const [currentBin, setCurrentBin] = useState<number | null>(null);\n\n  // HANDLERS\n\n  const onPropsChanged = () => {\n    if (props.controls && props.controls.type !== dataState.diagramType) {\n      onDiagramTypeChange(props.controls.type);\n    }\n  };\n\n  const onDiagramTypeChange = (value: DiagramType) => {\n    setDataState({\n      diagramType: value,\n      diagramControlParameter: diagramControlParameters[value],\n      attXData: filterItems(\n        diagramControlParameters[value][Control.attX].datatypes || [],\n      ),\n      attYData: filterItems(\n        diagramControlParameters[value][Control.attY].datatypes || [],\n      ),\n      attCData: filterItems(\n        diagramControlParameters[value][Control.attC].datatypes || [],\n      ),\n    });\n  };\n\n  // HELPER (see first part above)\n\n  // RENDER\n\n  return (\n    <Card className=\"configuration\">\n      <CardHeader\n        subheader=\"Plot Configurations\"\n        action={\n          <IconButton\n            size=\"small\"\n            aria-label=\"close\"\n            onClick={() => {\n              props.onClose();\n            }}\n            className=\"grid__item--close\"\n          >\n            <CloseIcon />\n          </IconButton>\n        }\n      />\n      <CardContent className=\"configuration__content\">\n        {!props.controls ? (\n          <Alert severity=\"info\">No plot selected</Alert>\n        ) : (\n          <>\n            <div className=\"form__title\">Graph Data</div>\n\n            <FormControl variant=\"outlined\" fullWidth>\n              <InputLabel>Plot type</InputLabel>\n              <Select\n                value={props.controls.type}\n                onChange={event => {\n                  props.onControlsChanged(props.controls.identifier, {\n                    type: event.target.value as number,\n                  });\n                }}\n                label=\"Plot type\"\n              >\n                {diagramTypeOptions.map(diagramType => (\n                  <MenuItem key={diagramType.value} value={diagramType.value}>\n                    {diagramType.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n\n            {dataState.diagramControlParameter[Control.attX].visible && (\n              <FormControl variant=\"outlined\" fullWidth>\n                <Autocomplete\n                  options={dataState.attXData.sort(\n                    (a, b) => -b.topic.localeCompare(a.topic),\n                  )}\n                  groupBy={option => option.topic}\n                  getOptionLabel={option => option.attributeTooltip}\n                  value={\n                    dataState.attXData.find(\n                      a => a.attribute === props.controls.attX,\n                    ) || null\n                  }\n                  onChange={(_event, newValue) => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      attX: newValue?.attribute || '',\n                    });\n                  }}\n                  renderInput={params => (\n                    <TextField\n                      {...params}\n                      label=\"X-coordinate attribute\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                />\n              </FormControl>\n            )}\n\n            {dataState.diagramControlParameter[Control.attY].visible && (\n              <FormControl variant=\"outlined\" fullWidth>\n                <Autocomplete\n                  options={dataState.attYData.sort(\n                    (a, b) => -b.topic.localeCompare(a.topic),\n                  )}\n                  groupBy={option => option.topic}\n                  getOptionLabel={option => option.attributeTooltip}\n                  value={\n                    dataState.attYData.find(\n                      a => a.attribute === props.controls.attY,\n                    ) || null\n                  }\n                  onChange={(_event, newValue) => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      attY: newValue?.attribute || '',\n                    });\n                  }}\n                  renderInput={params => (\n                    <TextField\n                      {...params}\n                      label=\"Y-coordinate attribute\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                />\n              </FormControl>\n            )}\n\n            {dataState.diagramControlParameter[Control.attC].visible && (\n              <FormControl variant=\"outlined\" fullWidth>\n                <Autocomplete\n                  options={dataState.attCData.sort(\n                    (a, b) => -b.topic.localeCompare(a.topic),\n                  )}\n                  groupBy={option => option.topic}\n                  getOptionLabel={option => option.attributeTooltip}\n                  value={\n                    dataState.attCData.find(\n                      a => a.attribute === props.controls.attC,\n                    ) || null\n                  }\n                  onChange={(_event, newValue) => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      attC: newValue?.attribute || '',\n                    });\n                  }}\n                  renderInput={params => (\n                    <TextField\n                      {...params}\n                      label=\"Color attribute\"\n                      variant=\"outlined\"\n                    />\n                  )}\n                />\n              </FormControl>\n            )}\n\n            {dataState.diagramControlParameter[Control.dt].visible && (\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                type=\"number\"\n                label=\"Time span of a visit (Days)\"\n                value={props.controls.dt || 0}\n                onChange={event => {\n                  props.onControlsChanged(props.controls.identifier, {\n                    dt: +event.target.value,\n                  });\n                }}\n                InputProps={{ inputProps: { min: 0 } }}\n              />\n            )}\n\n            {dataState.diagramControlParameter[Control.visit].visible && (\n              <FormControl variant=\"outlined\" fullWidth>\n                <InputLabel>Visit</InputLabel>\n                <Select\n                  label=\"Visit\"\n                  value={props.controls.visit}\n                  onChange={event => {\n                    const valueString: string = event.target.value as string;\n                    let value: Visit = Visit.all;\n                    switch (valueString) {\n                      case 'BASELINE': {\n                        value = Visit.baseline;\n                        break;\n                      }\n                      case 'FOLLOW': {\n                        value = Visit.follow;\n                        break;\n                      }\n                    }\n                    props.onControlsChanged(props.controls.identifier, {\n                      visit: value,\n                    });\n                  }}\n                >\n                  {visitOptions.map(option => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            )}\n\n            {props.controls.visit === Visit.follow && (\n              <div className=\"followup\">\n                {dataState.diagramControlParameter[Control.followup]\n                  .visible && (\n                  <TextField\n                    type=\"number\"\n                    variant=\"outlined\"\n                    label=\"Months from first visit\"\n                    value={props.controls.followup || 0}\n                    onChange={event => {\n                      props.onControlsChanged(props.controls.identifier, {\n                        followup: +event.target.value,\n                      });\n                    }}\n                    InputProps={{ inputProps: { min: 0 } }}\n                    className=\"followup__months\"\n                  />\n                )}\n\n                {dataState.diagramControlParameter[Control.tolerance]\n                  .visible && (\n                  <TextField\n                    type=\"number\"\n                    variant=\"outlined\"\n                    label=\"+/- (Months)\"\n                    value={props.controls.tolerance || 0}\n                    onChange={event => {\n                      props.onControlsChanged(props.controls.identifier, {\n                        tolerance: +event.target.value,\n                      });\n                    }}\n                    className=\"followup__tolerance\"\n                  />\n                )}\n              </div>\n            )}\n\n            <div className=\"form__title\">Display Options</div>\n\n            {dataState.diagramControlParameter[Control.fit].visible && (\n              <FormControl variant=\"outlined\" fullWidth>\n                <InputLabel>Fit</InputLabel>\n                <Select\n                  value={props.controls.fit}\n                  onChange={event => {\n                    //console.log(event.target.value);\n                    props.onControlsChanged(props.controls.identifier, {\n                      fit: (event.target.value as Fit) || Fit.none,\n                    });\n                  }}\n                  label=\"fit\"\n                >\n                  <MenuItem value={Fit.none}>none</MenuItem>\n                  <MenuItem value={Fit.regression}>regression</MenuItem>\n                  {/* @TODO add more fit values here */}\n                </Select>\n              </FormControl>\n            )}\n\n            <div className=\"switches\">\n              {dataState.diagramControlParameter[Control.norm].visible && (\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={props.controls.norm}\n                      onChange={event => {\n                        props.onControlsChanged(props.controls.identifier, {\n                          norm: event.target.checked,\n                        });\n                      }}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"Normalize\"\n                />\n              )}\n\n              {dataState.diagramControlParameter[Control.stack].visible && (\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={props.controls.stack}\n                      onChange={event => {\n                        props.onControlsChanged(props.controls.identifier, {\n                          stack: event.target.checked,\n                        });\n                      }}\n                      color=\"primary\"\n                    />\n                  }\n                  label=\"Stack\"\n                />\n              )}\n            </div>\n\n            {dataState.diagramControlParameter[Control.legend].visible && (\n              <FormControl variant=\"outlined\" fullWidth>\n                <InputLabel>Legend</InputLabel>\n                <Select\n                  value={props.controls.legend}\n                  onChange={event => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      legend: (event.target.value as Legend) || Legend.none,\n                    });\n                  }}\n                  label=\"Legend\"\n                >\n                  <MenuItem value={Legend.none}>no</MenuItem>\n                  <MenuItem value={Legend.legend}>yes</MenuItem>\n                  {/* @TODO add more legend values here */}\n                </Select>\n              </FormControl>\n            )}\n\n            {dataState.diagramControlParameter[Control.bins].visible && (\n              <div className=\"slider\" style={{display: \"none\" }}>\n                <Typography id=\"viewer-configuration-bin-acuteness-label\">\n                  Bin acuteness\n                </Typography>\n\n                <Slider\n                  value={\n                    currentBin !== null ? currentBin : props.controls.bins || 0\n                  }\n                  onChange={(event: any, newValue: number | number[]) => {\n                    const value = newValue as number;\n                    setCurrentBin(value);\n                  }}\n                  onChangeCommitted={(\n                    event: any,\n                    newValue: number | number[],\n                  ) => {\n                    setCurrentBin(null);\n                    const value = newValue as number;\n                    if (value !== props.controls.bins) {\n                      props.onControlsChanged(props.controls.identifier, {\n                        bins: value,\n                      });\n                    }\n                  }}\n                  aria-labelledby=\"viewer-configuration-bin-acuteness-label\"\n                />\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Controls;\n"]},"metadata":{},"sourceType":"module"}