{"version":3,"sources":["serviceWorker.ts","services/Backend.ts","components/Home.tsx","components/Grid.tsx","components/Plot.tsx","services/LocalStorage.ts","services/Utilities.ts","services/Attributes.ts","containers/Filter.tsx","containers/Controls.tsx","containers/Viewer.tsx","components/NotFound.tsx","routing.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","token","Legend","Fit","Stack","Norm","Home","props","className","ResponsiveReactGridLayout","WidthProvider","Responsive","Grid","rowHeight","cols","breakpointCols","layouts","draggableHandle","onBreakpointChange","onLayoutChange","children","Plot","data","layout","autosize","config","modeBarButtonsToRemove","useResizeHandler","onSelected","identifier","range","setStringItem","key","item","localStorage","setItem","getStringItem","getItem","JSON","stringify","value","parse","Math","floor","random","toString","message","parseFigure","input","figure","map","fd","type","sessionInit","identifiers","requestBody","usertoken","plot_ids","axios","post","api_url","then","response","process","utilities","getToken","Datatype","controlsState","controls","plot","attX","attY","attC","Dt","dt","visit","followup","tolerance","bins","norm","stack","fit","regression","legend","responseRaw","filterState","concept","filter_table","constraints","constraint","attribute","lower","upper","list","items","length","result","Object","keys","plots","forEach","name","attributeTooltips","attributes","attributeTooltip","Concept","getTooltip","DiagramType","Control","Visit","defaultConcept","patient","conceptOptions","label","Filter","React","useEffect","onPropsChanged","useState","constraintsTableState","setConstraintsTableState","newSubgroupState","setNewSubgroupState","filter","toFixed","join","onConstraintChanging","newConstraint","find","onConstraintsChanged","onFilterChanged","split","FormLabel","RadioGroup","row","onChange","event","target","FormControlLabel","control","Radio","color","TableContainer","component","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","Button","variant","onClick","scope","Attributes","TextField","inputProps","style","textAlign","onBlur","onKeyUp","InputLabel","InputLabelProps","shrink","onSubgroupDefine","subgroups","subgroup","onSubgroupDelete","onSubgroupActivate","diagramTypeOptions","Scatter","Histogram","Bar","Timeline","visitOptions","all","baseline","follow","diagramControlParameters","visible","datatypes","float","int","patients","code","date","initialDiagramType","Controls","filterItems","values","findIndex","datatype","hasOwnProperty","topic","push","initialDataState","diagramType","diagramControlParameter","attXData","attYData","attCData","dataState","setDataState","onDiagramTypeChange","id","Select","labelId","onControlsChanged","MenuItem","mode","currentNode","_depth","texts","placeholder","InputProps","min","valueString","option","Switch","checked","Typography","gutterBottom","Slider","newValue","aria-labelledby","initialControls","Viewer","errorState","setErrorState","initialViewerState","controlsVisible","filtersVisible","activePlot","viewerState","setViewerState","gridLayoutsState","forceResize","setGridLayoutsState","y","Infinity","gridItemsState","setGridItemsState","initialResponsiveState","breakpoint","gridResponsiveState","setGridResponsiveState","defaultFilterState","setFilterState","subgroupsState","setSubgroupsState","plotControlsState","setPlotControlsState","plotsState","setPlotsState","updatingState","setUpdatingState","onPlotSelected","setUpdating","newFilterState","x","backend","figures","handleFilterUpdateResponse","catch","handleError","filters","error","console","log","toJSON","e","handleControlsUpdateResponse","newPlotsState","newUpdatingState","dispatchEvent","Event","createGridItem","i","w","h","createInitialPlotControlsState","newState","createGridItemElement","data-grid","newPlotControlsState","onGridItemRemove","newIdentifiers","title","newControls","newPlotControls","lg","md","sm","xs","xxs","_subgroup","alert","NotFound","routing","basename","exact","activeClassName","to","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.042413a1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Figure } from 'react-plotly.js';\nimport { FilterState, Concept } from '../containers/Filter';\nimport localStorage from '../services/LocalStorage';\nimport utilities from '../services/Utilities';\nimport { DiagramType, Visit, ControlsState } from './../containers/Controls';\nimport axios from 'axios';\n\nlet token: string;\n\n// HELPER\n\nconst parseFigure = (input: string): Partial<Figure> => {\n  const figure = JSON.parse(input);\n  return {\n    ...figure,\n    data: figure.data?.map((fd: any) => {\n      return {\n        ...fd,\n        // use scatter plot WebGL variant to improve performance\n        type: fd.type === 'scatter' ? 'scattergl' : fd.type,\n      };\n    }),\n  };\n};\n\n// SESSION INIT\n\ninterface SessionInitRequest {\n  usertoken: string;\n  plot_ids: string[];\n}\n\ntype SessionInitResponse = any; // @TODO define SessionInitResponse\n\ntype SessionInitReturn = any; // @TODO define SessionInitReturn\n\nconst sessionInit = (\n  identifiers: string[] = []\n): Promise<SessionInitReturn> => {\n  const requestBody: SessionInitRequest = {\n    usertoken: token,\n    plot_ids: identifiers,\n  };\n  return axios\n    .post(`${api_url}/init`, requestBody)\n    .then((response: SessionInitResponse) => response.data);\n};\n\n// SESSION RESET\n\ninterface SessionResetRequest {\n  usertoken: string;\n}\n\ntype SessionResetResponse = any; // @TODO define SessionResetResponse\n\ntype SessionResetReturn = any; // @TODO define SessionResetReturn\n\nconst sessionReset = (): Promise<SessionResetReturn> => {\n  const requestBody: SessionResetRequest = {\n    usertoken: token,\n  };\n  return axios\n    .post(`${api_url}/reset-session`, requestBody)\n    .then((response: SessionResetResponse) => response.data);\n};\n\n// CONTROLS UPDATE\n\nenum Legend {\n  legend = 'legend',\n}\n\nenum Fit {\n  regression = 'regression',\n}\n\nenum Stack {\n  stack = 'stack',\n}\n\nenum Norm {\n  norm = 'norm',\n}\n\ninterface ControlsUpdateRequest {\n  usertoken: string;\n  controls: {\n    plot: string;\n    type: DiagramType;\n    attX: string;\n    attY: string;\n    attC: string;\n    Dt: number | null;\n    visit: Visit;\n    followup: number;\n    tolerance: number;\n    bins: number;\n    norm: Norm[];\n    stack: Stack[];\n    fit: Fit[];\n    legend: Legend[];\n  };\n}\n\ntype ControlsUpdateResponse = any; // @TODO define ControlsUpdateResponse\n\ntype ControlsUpdateReturn = Partial<Figure>;\n\nconst controlsUpdate = (\n  controlsState: ControlsState\n): Promise<ControlsUpdateReturn> => {\n  const requestBody: ControlsUpdateRequest = {\n    usertoken: token,\n    controls: {\n      plot: controlsState.identifier,\n      type: controlsState.type,\n      attX: controlsState.attX,\n      attY: controlsState.attY,\n      attC: controlsState.attC,\n      Dt: controlsState.dt,\n      visit: controlsState.visit,\n      followup: controlsState.followup,\n      tolerance: controlsState.tolerance,\n      bins: controlsState.bins,\n      norm: controlsState.norm ? [Norm.norm] : [],\n      stack: controlsState.stack ? [Stack.stack] : [],\n      fit: controlsState.fit ? [Fit.regression] : [],\n      legend: controlsState.legend ? [Legend.legend] : [],\n    },\n  };\n  return axios\n    .post(`${api_url}/getdata`, requestBody)\n    .then((responseRaw: ControlsUpdateResponse) => {\n      return parseFigure(responseRaw.data.figure);\n    });\n};\n\n// FILTER UPDATE\n\ninterface FilterUpdateRequest {\n  usertoken: string;\n  concept: Concept;\n  filter_table: {\n    // @TODO @API rename this to constraints\n    attribute: string;\n    lower: number;\n    upper: number;\n    list: string[] | null;\n    // set: [], // @TODO @API is filter-edit.filter_table.set required?\n    // human_readable: string // @TODO @API is filter-edit.filter_table.human_readable required?\n  }[];\n}\n\ntype FilterUpdateResponse = any; // @TODO define FiltersUpdateResponse\n\nexport type FilterUpdateReturn = { [key: string]: Partial<Figure> };\n\nconst filterUpdate = (\n  filterState: FilterState\n): Promise<FilterUpdateReturn> => {\n  const requestBody: FilterUpdateRequest = {\n    usertoken: token,\n    concept: filterState.concept,\n    filter_table: filterState.constraints.map((constraint) => {\n      return {\n        attribute: constraint.attribute,\n        lower: constraint.lower,\n        upper: constraint.upper,\n        list: constraint.items.length > 0 ? constraint.items : null,\n      };\n    }), // @TODO @API rename this to constraints\n  };\n  return axios\n    .post(`${api_url}/update-filter`, requestBody)\n    .then((response) => {\n      const result: { [key: string]: Partial<Figure> } = {};\n      Object.keys(response.data.plots).forEach((identifier) => {\n        result[identifier] = parseFigure(\n          response.data.plots[identifier].figure\n        );\n      });\n      return result;\n    });\n};\n\n// SUBGROUP DEFINE\n\ninterface SubgroupDefineRequest {\n  usertoken: string;\n  name: string;\n}\n\ntype SubgroupDefineResponse = any; // @TODO define SubgroupDefineResponse\n\ntype SubgroupDefineReturn = null;\n\nconst subgroupDefine = (name: string): Promise<SubgroupDefineReturn> => {\n  const requestBody: SubgroupDefineRequest = {\n    usertoken: token,\n    name: name,\n  };\n  return axios\n    .post(`${api_url}/subgroup-define`, requestBody)\n    .then((response: SubgroupDefineResponse) => null);\n};\n\n// TOKEN\n\nconst api_url = process.env.REACT_APP_API_URL;\n\nconst getToken = () => {\n  let token = localStorage.getStringItem('token');\n  if (!token) {\n    token = utilities.generateIdentifier();\n    localStorage.setStringItem('token', token);\n    sessionInit(); // @TODO do we need to wait until ready?\n  }\n  return token;\n};\n\ntoken = getToken();\n\nexport default {\n  sessionInit,\n  sessionReset,\n  controlsUpdate,\n  filterUpdate,\n  subgroupDefine,\n};\n","import React from 'react';\n\ninterface Props {}\n\nconst Home: React.StatelessComponent<Props> = (props) => {\n  return (\n    <div className='container'>\n      <h1>Clinical Data Viewer</h1>\n      <p>\n        The clinical data viewer aspires to provide a solution for integrative\n        data analysis. It is not only meant to be an analyzing tool but also an\n        idea generator, where complex data is easy accessible and presented in a\n        well-arranged environment. Furthermore, it is not bound to specific\n        sources of data. These are able to be combined and compared but the user\n        may also upload his desired data. The main concept of the viewer is a\n        patient-based representation, which enables a cross-filtering over\n        different variables and a longitudinal distribution for appropriate\n        data.\n      </p>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport './Grid.css';\nimport { WidthProvider, Responsive } from 'react-grid-layout';\nimport '../../node_modules/react-grid-layout/css/styles.css';\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\n\ninterface Props {\n  breakpointCols: {\n    lg: number;\n    md: number;\n    sm: number;\n    xs: number;\n    xxs: number;\n  };\n  rowHeight: number;\n  layouts: ReactGridLayout.Layouts;\n  onBreakpointChange: (breakpoint: string, cols: number) => void;\n  onLayoutChange: (\n    layout: ReactGridLayout.Layout[],\n    layouts: ReactGridLayout.Layouts\n  ) => void;\n}\n\nconst Grid: React.StatelessComponent<Props> = (props) => {\n  return (\n    <ResponsiveReactGridLayout\n      className='grid'\n      rowHeight={props.rowHeight}\n      cols={props.breakpointCols}\n      layouts={props.layouts}\n      draggableHandle='.grid--draggable'\n      onBreakpointChange={props.onBreakpointChange}\n      onLayoutChange={props.onLayoutChange}\n    >\n      {props.children}\n    </ResponsiveReactGridLayout>\n  );\n};\n\nexport default Grid;\n","import React from 'react';\nimport Plotly from 'react-plotly.js';\n\ninterface Props {\n  identifier: string;\n  data: Plotly.Data[];\n  layout: Partial<Plotly.Layout>;\n  onSelected: (\n    identifier: string,\n    range: Plotly.SelectionRange | undefined\n  ) => void;\n}\n\nconst Plot: React.StatelessComponent<Props> = (props) => {\n  return (\n    <Plotly\n      data={props.data}\n      layout={{ ...props.layout, autosize: true }}\n      config={{\n        modeBarButtonsToRemove: ['lasso2d'],\n      }}\n      useResizeHandler={true}\n      className='fill'\n      onSelected={(data) => {\n        props.onSelected(props.identifier, data.range);\n      }}\n    />\n  );\n};\n\nexport default Plot;\n","const setStringItem = (key: string, item: string) => {\n  if (localStorage) {\n    localStorage.setItem(key, item);\n  }\n};\n\nconst setObjectItem = (key: string, item: any) => {\n  setStringItem(key, JSON.stringify(item));\n};\n\nconst getStringItem = (key: string): string | null => {\n  if (localStorage) {\n    return localStorage.getItem(key);\n  } else {\n    return null;\n  }\n};\n\nconst getObjectItem = (key: string): any | null => {\n  const value = getStringItem(key);\n  if (value) {\n    return JSON.parse(value);\n  } else {\n    return value;\n  }\n};\n\nconst removeItem = (key: string) => {\n  if (localStorage) {\n    localStorage.removeItem(key);\n  }\n};\n\nexport default {\n  setStringItem,\n  setObjectItem,\n  getStringItem,\n  getObjectItem,\n  removeItem,\n};\n","const generateIdentifier = () => {\n  return Math.floor(Math.random() * 16777215 ** 2).toString(16);\n};\n\nconst devLog = (message?: any, ...optionalParams: any[]) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(message, ...optionalParams);\n  }\n};\n\nexport default {\n  generateIdentifier,\n  devLog,\n};\n","import attributes from '../attributes.json';\n\ninterface Attribute {\n  topic: string;\n  topicDescription: string;\n  umbrella: string;\n  umbrellaDescription: string;\n  attribute: string;\n  attributeDescription: string;\n  attributeTooltip: string;\n  datatype: string;\n  domain: string;\n  unit: string;\n}\n\nexport enum Datatype {\n  date = 'date',\n  int = 'int',\n  float = 'float',\n  code = 'code',\n  subgroups = 'SUBGROUPS',\n  patients = 'PATIENTS',\n}\n// PATIENTS and SUBGROUPS are added to attributes manually and have this values as datatype\n\nconst attributeTooltips: { [key: string]: string } = {};\nattributes.forEach((attribute) => {\n  attributeTooltips[attribute.attribute] = attribute.attributeTooltip;\n});\n\nexport const getTooltip = (attribute: string): string => {\n  return attributeTooltips[attribute];\n};\n\nexport const filter = (datatypes: Datatype[]): Attribute[] => {\n  return attributes.filter(\n    (attribute) =>\n      Object.values(datatypes).findIndex(\n        (datatype) => attribute.datatype === datatype\n      ) !== -1\n  );\n};\n","import React, { useState } from 'react';\nimport './Filter.css';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport * as Attributes from '../services/Attributes';\n\n// STRUCTURES\n\nexport enum Concept {\n  patient = 1,\n  visit = 2,\n}\n\ninterface Constraint {\n  attribute: string;\n  lower: number;\n  upper: number;\n  items: string[];\n}\n\ninterface ConstraintRow {\n  attribute: string;\n  lower: string;\n  upper: string;\n  items: string;\n}\n\nexport interface Subgroup {\n  name: string;\n  constraints: Constraint[];\n}\n\nexport interface FilterState {\n  concept: Concept;\n  constraints: Constraint[];\n}\n\n// CONFIG\n\nexport const defaultConcept = Concept.patient;\n\nconst conceptOptions = [\n  { label: 'Patient', value: Concept.patient },\n  { label: 'Visit', value: Concept.visit },\n];\n\n// PROPS\n\ninterface Props {\n  filter: FilterState;\n  subgroups: Subgroup[];\n  onFilterChanged: (filter: Partial<FilterState>) => void;\n  onSubgroupDefine: (subgroup: Subgroup) => void;\n  onSubgroupDelete: (name: string) => void;\n  onSubgroupActivate: (name: string) => void;\n}\n\nconst Filter: React.StatelessComponent<Props> = (props) => {\n  React.useEffect(() => {\n    onPropsChanged();\n  }, [props]);\n\n  // STATES\n\n  //constraintsTableState\n  const [constraintsTableState, setConstraintsTableState] = useState<\n    ConstraintRow[]\n  >([]);\n\n  //newSubgroupState\n  const [newSubgroupState, setNewSubgroupState] = useState<string>('');\n\n  // HANDLERS\n\n  const onPropsChanged = () => {\n    setConstraintsTableState(\n      props.filter.constraints.map((constraint) => {\n        return {\n          attribute: constraint.attribute,\n          lower: constraint.lower.toFixed(1),\n          upper: constraint.upper.toFixed(1),\n          items: constraint.items.join(', '),\n        };\n      })\n    );\n  };\n\n  const onConstraintChanging = (\n    attribute: string,\n    constraint: Partial<ConstraintRow>\n  ) => {\n    const newConstraint: ConstraintRow = {\n      attribute: '',\n      lower: '',\n      upper: '',\n      items: '',\n      ...constraintsTableState.find(\n        (constraint) => constraint.attribute === attribute\n      ),\n      ...constraint,\n    };\n    setConstraintsTableState([\n      ...constraintsTableState.filter(\n        (constraint) => constraint.attribute !== attribute\n      ),\n      newConstraint,\n    ]);\n  };\n\n  const onConstraintsChanged = () => {\n    props.onFilterChanged({\n      constraints: constraintsTableState.map((constraint) => {\n        return {\n          attribute: constraint.attribute,\n          lower: +constraint.lower,\n          upper: +constraint.upper,\n          items:\n            constraint.items.length > 0 ? constraint.items.split(', ') : [],\n        };\n      }),\n    });\n  };\n\n  const onConstraintsReset = () => {\n    props.onFilterChanged({ constraints: [] });\n  };\n\n  const onConstraintRemove = (attribute: string) => {\n    props.onFilterChanged({\n      constraints: props.filter.constraints.filter(\n        (constraint) => constraint.attribute !== attribute\n      ),\n    });\n  };\n\n  // HELPER\n\n  // RENDER\n\n  return (\n    <div className='filter box'>\n      <h1>Filter Settings</h1>\n      <FormLabel>Filter by</FormLabel>\n      <RadioGroup\n        row\n        value={props.filter.concept}\n        onChange={(event) => {\n          props.onFilterChanged({ concept: +event.target.value });\n        }}\n      >\n        {conceptOptions.map((concept) => (\n          <FormControlLabel\n            key={concept.value}\n            value={concept.value}\n            control={<Radio color='primary' />}\n            label={concept.label}\n          />\n        ))}\n      </RadioGroup>\n      <TableContainer component={Paper}>\n        <Table size='small'>\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>Attribute</TableCell>\n              <TableCell align='right'>Lower</TableCell>\n              <TableCell align='right'>Upper</TableCell>\n              <TableCell>Items</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {constraintsTableState.map((constraint) => (\n              <TableRow key={constraint.attribute}>\n                <TableCell>\n                  <Button\n                    variant='contained'\n                    onClick={() => {\n                      onConstraintRemove(constraint.attribute);\n                    }}\n                  >\n                    x\n                  </Button>\n                </TableCell>\n                <TableCell component='th' scope='row'>\n                  {Attributes.getTooltip(constraint.attribute)}\n                </TableCell>\n                <TableCell>\n                  <TextField\n                    inputProps={{ style: { textAlign: 'right' } }}\n                    value={constraint.lower}\n                    onChange={(event) => {\n                      onConstraintChanging(constraint.attribute, {\n                        lower: event.target.value,\n                      });\n                    }}\n                    onBlur={() => onConstraintsChanged()}\n                    onKeyUp={(event) => {\n                      if (event.key === 'Enter') {\n                        onConstraintsChanged();\n                      }\n                    }}\n                  />\n                </TableCell>\n                <TableCell>\n                  <TextField\n                    inputProps={{ style: { textAlign: 'right' } }}\n                    value={constraint.upper}\n                    onChange={(event) => {\n                      onConstraintChanging(constraint.attribute, {\n                        upper: event.target.value,\n                      });\n                    }}\n                    onBlur={() => onConstraintsChanged()}\n                    onKeyUp={(event) => {\n                      if (event.key === 'Enter') {\n                        onConstraintsChanged();\n                      }\n                    }}\n                  />\n                </TableCell>\n                <TableCell>{constraint.items}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Button variant='contained' color='primary' onClick={onConstraintsReset}>\n        Reset filters\n      </Button>\n      <h1>Subgroup Definitions</h1>\n      <InputLabel className='u-mt1'>Name</InputLabel>\n      <TextField\n        value={newSubgroupState}\n        onChange={(event) => {\n          setNewSubgroupState(event.target.value);\n        }}\n        InputLabelProps={{\n          shrink: true,\n        }}\n      />{' '}\n      <Button\n        variant='contained'\n        color='primary'\n        onClick={() => {\n          props.onSubgroupDefine({\n            name: newSubgroupState,\n            constraints: props.filter.constraints,\n          });\n        }}\n      >\n        Define\n      </Button>\n      <TableContainer component={Paper}>\n        <Table size='small'>\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell>Subgroup</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {props.subgroups.map((subgroup) => (\n              <TableRow key={subgroup.name}>\n                <TableCell>\n                  <Button\n                    variant='contained'\n                    onClick={() => {\n                      props.onSubgroupDelete(subgroup.name);\n                    }}\n                  >\n                    x\n                  </Button>\n                  <Button\n                    variant='contained'\n                    onClick={() => {\n                      props.onSubgroupActivate(subgroup.name);\n                    }}\n                  >\n                    activate\n                  </Button>\n                </TableCell>\n                <TableCell component='th' scope='row'>\n                  {subgroup.name}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default Filter;\n","import React, { Fragment, useState } from 'react';\nimport './Controls.css';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport DropdownTreeSelect, {\n  TreeData as DropdownTreeSelectTreeData,\n  TreeNodeProps as DropdownTreeSelectTreeNodeProps,\n} from 'react-dropdown-tree-select';\nimport 'react-dropdown-tree-select/dist/styles.css';\nimport * as Attributes from '../services/Attributes';\n\n// STRUCTURES\n\nexport enum DiagramType {\n  Scatter = 1,\n  Histogram = 2,\n  Bar = 3,\n  Timeline = 4,\n}\n\nenum Control {\n  attX,\n  attY,\n  attC,\n  dt,\n  visit,\n  followup,\n  tolerance,\n  fit,\n  norm,\n  stack,\n  legend,\n  bins,\n}\n\nexport interface ControlsState {\n  identifier: string;\n  type: DiagramType;\n  attX: string;\n  attY: string;\n  attC: string;\n  dt: number;\n  visit: Visit;\n  followup: number;\n  tolerance: number;\n  norm: boolean;\n  stack: boolean;\n  fit: boolean;\n  legend: boolean;\n  bins: number;\n}\n\nexport enum Visit {\n  all = 'ALL',\n  baseline = 'BASELINE',\n  follow = 'FOLLOW',\n}\n\n// CONFIG\n\nconst diagramTypeOptions = [\n  { label: 'Scatter', value: DiagramType.Scatter },\n  { label: 'Histogram', value: DiagramType.Histogram },\n  { label: 'Bar', value: DiagramType.Bar },\n  { label: 'Timeline', value: DiagramType.Timeline },\n];\n\nconst visitOptions = [\n  { label: 'All visits', value: Visit.all },\n  { label: 'First visit', value: Visit.baseline },\n  { label: 'Follow-up visits', value: Visit.follow },\n];\n\ntype DiagramControlParameter = {\n  [key in Control]: {\n    visible: boolean;\n    datatypes?: Attributes.Datatype[];\n  };\n};\n\ntype DiagramControlParameters = {\n  [key in DiagramType]: DiagramControlParameter;\n};\n\nconst diagramControlParameters: DiagramControlParameters = {\n  [DiagramType.Scatter]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Attributes.Datatype.float, Attributes.Datatype.int],\n    },\n    [Control.attY]: {\n      visible: true,\n      datatypes: [Attributes.Datatype.float, Attributes.Datatype.int],\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [\n        Attributes.Datatype.subgroups,\n        Attributes.Datatype.patients,\n        Attributes.Datatype.float,\n        Attributes.Datatype.int,\n        Attributes.Datatype.code,\n      ],\n    },\n    [Control.dt]: {\n      visible: true,\n    },\n    [Control.visit]: {\n      visible: true,\n    },\n    [Control.followup]: {\n      visible: true,\n    },\n    [Control.tolerance]: {\n      visible: true,\n    },\n    [Control.fit]: {\n      visible: true,\n    },\n    [Control.norm]: {\n      visible: false,\n    },\n    [Control.stack]: {\n      visible: false,\n    },\n    [Control.legend]: {\n      visible: true,\n    },\n    [Control.bins]: {\n      visible: false,\n    },\n  },\n  [DiagramType.Histogram]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Attributes.Datatype.float, Attributes.Datatype.int],\n    },\n    [Control.attY]: {\n      visible: false,\n      datatypes: [],\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [\n        Attributes.Datatype.subgroups,\n        Attributes.Datatype.patients,\n        Attributes.Datatype.code,\n      ],\n    },\n    [Control.dt]: {\n      visible: true,\n    },\n    [Control.visit]: {\n      visible: true,\n    },\n    [Control.followup]: {\n      visible: true,\n    },\n    [Control.tolerance]: {\n      visible: true,\n    },\n    [Control.fit]: {\n      visible: false,\n    },\n    [Control.norm]: {\n      visible: true,\n    },\n    [Control.stack]: {\n      visible: true,\n    },\n    [Control.legend]: {\n      visible: true,\n    },\n    [Control.bins]: {\n      visible: true,\n    },\n  },\n  [DiagramType.Bar]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [\n        Attributes.Datatype.subgroups,\n        Attributes.Datatype.patients,\n        Attributes.Datatype.code,\n      ],\n    },\n    [Control.attY]: {\n      visible: false,\n      datatypes: [],\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [\n        Attributes.Datatype.subgroups,\n        Attributes.Datatype.patients,\n        Attributes.Datatype.code,\n      ],\n    },\n    [Control.dt]: {\n      visible: true,\n    },\n    [Control.visit]: {\n      visible: true,\n    },\n    [Control.followup]: {\n      visible: true,\n    },\n    [Control.tolerance]: {\n      visible: true,\n    },\n    [Control.fit]: {\n      visible: false,\n    },\n    [Control.norm]: {\n      visible: true,\n    },\n    [Control.stack]: {\n      visible: true,\n    },\n    [Control.legend]: {\n      visible: true,\n    },\n    [Control.bins]: {\n      visible: false,\n    },\n  },\n  [DiagramType.Timeline]: {\n    [Control.attX]: {\n      visible: true,\n      datatypes: [Attributes.Datatype.date],\n    },\n    [Control.attY]: {\n      visible: true,\n      datatypes: [Attributes.Datatype.float, Attributes.Datatype.int],\n    },\n    [Control.attC]: {\n      visible: true,\n      datatypes: [Attributes.Datatype.float, Attributes.Datatype.int],\n    },\n    [Control.dt]: {\n      visible: true,\n    },\n    [Control.visit]: {\n      visible: true,\n    },\n    [Control.followup]: {\n      visible: true,\n    },\n    [Control.tolerance]: {\n      visible: true,\n    },\n    [Control.fit]: {\n      visible: true,\n    },\n    [Control.norm]: {\n      visible: false,\n    },\n    [Control.stack]: {\n      visible: false,\n    },\n    [Control.legend]: {\n      visible: true,\n    },\n    [Control.bins]: {\n      visible: false,\n    },\n  },\n};\n\nexport const initialDiagramType: DiagramType = DiagramType.Scatter;\n\n// PROPS\n\ninterface Props {\n  controls: ControlsState;\n  onControlsChanged: (\n    identifier: string,\n    controls: Partial<ControlsState>\n  ) => void;\n}\n\nconst Controls: React.StatelessComponent<Props> = (props) => {\n  React.useEffect(() => {\n    onPropsChanged();\n  }, [props]);\n\n  // HELPER (see second part below)\n\n  const filterItems = (\n    datatypes: Attributes.Datatype[]\n  ): DropdownTreeSelectTreeData => {\n    const items: { [key: string]: DropdownTreeSelectTreeNodeProps } = {};\n    Attributes.filter(datatypes).forEach((attribute) => {\n      if (!items.hasOwnProperty(attribute.topic)) {\n        items[attribute.topic] = {\n          label: attribute.topic,\n          value: attribute.topic,\n          children: [],\n        };\n      }\n      items[attribute.topic].children?.push({\n        label: attribute.attributeTooltip,\n        value: attribute.attribute,\n      });\n    });\n\n    return Object.values(items);\n  };\n\n  // STATES\n\n  // dataState\n  interface DataState {\n    diagramType: DiagramType;\n    diagramControlParameter: DiagramControlParameter;\n    attXData: DropdownTreeSelectTreeData;\n    attYData: DropdownTreeSelectTreeData;\n    attCData: DropdownTreeSelectTreeData;\n  }\n  const initialDataState: DataState = {\n    diagramType: initialDiagramType,\n    diagramControlParameter: diagramControlParameters[initialDiagramType],\n    attXData: filterItems(\n      diagramControlParameters[initialDiagramType][Control.attX].datatypes || []\n    ),\n    attYData: filterItems(\n      diagramControlParameters[initialDiagramType][Control.attY].datatypes || []\n    ),\n    attCData: filterItems(\n      diagramControlParameters[initialDiagramType][Control.attC].datatypes || []\n    ),\n  };\n  const [dataState, setDataState] = useState<DataState>(initialDataState);\n\n  // HANDLERS\n\n  const onPropsChanged = () => {\n    if (props.controls && props.controls.type !== dataState.diagramType) {\n      onDiagramTypeChange(props.controls.type);\n    }\n  };\n\n  const onDiagramTypeChange = (value: DiagramType) => {\n    setDataState({\n      diagramType: value,\n      diagramControlParameter: diagramControlParameters[value],\n      attXData: filterItems(\n        diagramControlParameters[value][Control.attX].datatypes || []\n      ),\n      attYData: filterItems(\n        diagramControlParameters[value][Control.attY].datatypes || []\n      ),\n      attCData: filterItems(\n        diagramControlParameters[value][Control.attC].datatypes || []\n      ),\n    });\n  };\n\n  // HELPER (see first part above)\n\n  // RENDER\n\n  return (\n    <div className='configuration box'>\n      {!props.controls ? (\n        'No plot selected'\n      ) : (\n        <Fragment>\n          {props.controls.identifier}\n\n          <h1>Graph Options</h1>\n          <div className='column'>\n            <InputLabel id='viewer-configuration-diagram-type-label'>\n              Plot type\n            </InputLabel>\n            <Select\n              labelId='viewer-configuration-diagram-type-label'\n              value={props.controls.type}\n              onChange={(event) => {\n                props.onControlsChanged(props.controls.identifier, {\n                  type: event.target.value as number,\n                });\n              }}\n            >\n              {diagramTypeOptions.map((diagramType) => (\n                <MenuItem key={diagramType.value} value={diagramType.value}>\n                  {diagramType.label}\n                </MenuItem>\n              ))}\n            </Select>\n\n            {dataState.diagramControlParameter[Control.attX].visible ? (\n              <Fragment>\n                <InputLabel className='u-mt1'>X-coordinate item</InputLabel>\n                {Attributes.getTooltip(props.controls.attX)}\n                <DropdownTreeSelect\n                  mode='radioSelect'\n                  data={dataState.attXData}\n                  onChange={(currentNode) => {\n                    if (currentNode._depth === 1) {\n                      props.onControlsChanged(props.controls.identifier, {\n                        attX: currentNode.value,\n                      });\n                    } else {\n                      props.onControlsChanged(props.controls.identifier, {\n                        attX: '',\n                      });\n                    }\n                  }}\n                  texts={{ placeholder: 'Filter' }}\n                />\n              </Fragment>\n            ) : null}\n\n            {dataState.diagramControlParameter[Control.attY].visible ? (\n              <Fragment>\n                <InputLabel className='u-mt1'>Y-coordinate item</InputLabel>\n                {Attributes.getTooltip(props.controls.attY)}\n                <DropdownTreeSelect\n                  mode='radioSelect'\n                  data={dataState.attYData}\n                  onChange={(currentNode) => {\n                    if (currentNode._depth === 1) {\n                      props.onControlsChanged(props.controls.identifier, {\n                        attY: currentNode.value,\n                      });\n                    } else {\n                      props.onControlsChanged(props.controls.identifier, {\n                        attY: '',\n                      });\n                    }\n                  }}\n                  texts={{ placeholder: 'Filter' }}\n                />\n              </Fragment>\n            ) : null}\n\n            {dataState.diagramControlParameter[Control.attC].visible ? (\n              <Fragment>\n                <InputLabel className='u-mt1'>Third item</InputLabel>\n                {Attributes.getTooltip(props.controls.attC)}\n                <DropdownTreeSelect\n                  mode='radioSelect'\n                  data={dataState.attCData}\n                  onChange={(currentNode) => {\n                    // only change if clicked on leaf\n                    if (currentNode._depth === 1) {\n                      props.onControlsChanged(props.controls.identifier, {\n                        attC: currentNode.value,\n                      });\n                    } else {\n                      props.onControlsChanged(props.controls.identifier, {\n                        attC: '',\n                      });\n                    }\n                  }}\n                  texts={{ placeholder: 'Filter' }}\n                />\n              </Fragment>\n            ) : null}\n\n            {dataState.diagramControlParameter[Control.dt].visible ? (\n              <div>\n                <InputLabel className='u-mt1'>Time span of a visit</InputLabel>\n                <TextField\n                  type='number'\n                  value={props.controls.dt || 0}\n                  onChange={(event) => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      dt: +event.target.value,\n                    });\n                  }}\n                  InputProps={{ inputProps: { min: 0 } }}\n                  InputLabelProps={{ shrink: true }}\n                />{' '}\n                days\n              </div>\n            ) : null}\n\n            {dataState.diagramControlParameter[Control.visit].visible ? (\n              <Fragment>\n                <InputLabel\n                  className='u-mt1'\n                  id='viewer-configuration-visits-label'\n                >\n                  Visit\n                </InputLabel>\n                <Select\n                  labelId='viewer-configuration-visits-label'\n                  value={props.controls.visit}\n                  onChange={(event) => {\n                    const valueString: string = event.target.value as string;\n                    let value: Visit = Visit.all;\n                    switch (valueString) {\n                      case 'BASELINE': {\n                        value = Visit.baseline;\n                        break;\n                      }\n                      case 'FOLLOW': {\n                        value = Visit.follow;\n                        break;\n                      }\n                    }\n                    props.onControlsChanged(props.controls.identifier, {\n                      visit: value,\n                    });\n                  }}\n                >\n                  {visitOptions.map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </Fragment>\n            ) : null}\n            {props.controls.visit === Visit.follow ? (\n              <Fragment>\n                <InputLabel\n                  className='u-mt1'\n                  id='viewer-configuration-followup-label'\n                >\n                  Months from first visit\n                </InputLabel>\n                <div className='row'>\n                  {dataState.diagramControlParameter[Control.followup]\n                    .visible ? (\n                    <TextField\n                      type='number'\n                      value={props.controls.followup || 0}\n                      onChange={(event) => {\n                        props.onControlsChanged(props.controls.identifier, {\n                          followup: +event.target.value,\n                        });\n                      }}\n                      InputProps={{ inputProps: { min: 0 } }}\n                      InputLabelProps={{ shrink: true }}\n                    />\n                  ) : null}\n                  {dataState.diagramControlParameter[Control.tolerance]\n                    .visible ? (\n                    <Fragment>\n                      &nbsp;&nbsp;+/-&nbsp;&nbsp;\n                      <TextField\n                        type='number'\n                        value={props.controls.tolerance || 0}\n                        onChange={(event) => {\n                          props.onControlsChanged(props.controls.identifier, {\n                            tolerance: +event.target.value,\n                          });\n                        }}\n                        InputLabelProps={{ shrink: true }}\n                      />\n                    </Fragment>\n                  ) : null}\n                </div>\n              </Fragment>\n            ) : null}\n          </div>\n\n          <h1>Control Elements</h1>\n          {dataState.diagramControlParameter[Control.fit].visible ? (\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={props.controls.fit}\n                  onChange={(event) => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      fit: event.target.checked,\n                    });\n                  }}\n                  color='primary'\n                />\n              }\n              label='Regression'\n            />\n          ) : null}\n          {dataState.diagramControlParameter[Control.norm].visible ? (\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={props.controls.norm}\n                  onChange={(event) => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      norm: event.target.checked,\n                    });\n                  }}\n                  color='primary'\n                />\n              }\n              label='Normalize'\n            />\n          ) : null}\n          {dataState.diagramControlParameter[Control.stack].visible ? (\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={props.controls.stack}\n                  onChange={(event) => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      stack: event.target.checked,\n                    });\n                  }}\n                  color='primary'\n                />\n              }\n              label='Stack'\n            />\n          ) : null}\n          {dataState.diagramControlParameter[Control.legend].visible ? (\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={props.controls.legend}\n                  onChange={(event) => {\n                    props.onControlsChanged(props.controls.identifier, {\n                      legend: event.target.checked,\n                    });\n                  }}\n                  color='primary'\n                />\n              }\n              label='Legend'\n            />\n          ) : null}\n          {dataState.diagramControlParameter[Control.bins].visible ? (\n            <Fragment>\n              <Typography\n                id='viewer-configuration-bin-acuteness-label'\n                gutterBottom\n              >\n                Bin acuteness\n              </Typography>\n              <Slider\n                value={props.controls.bins || 0}\n                onChange={(event: any, newValue: number | number[]) => {\n                  const value = newValue as number;\n                  if (value !== props.controls.bins) {\n                    props.onControlsChanged(props.controls.identifier, {\n                      bins: value,\n                    });\n                  }\n                }}\n                aria-labelledby='viewer-configuration-bin-acuteness-label'\n              />\n            </Fragment>\n          ) : null}\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default Controls;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport Grid from '../components/Grid';\nimport Plot from '../components/Plot';\nimport localStorage from '../services/LocalStorage';\nimport backend from '../services/Backend';\nimport utilities from '../services/Utilities';\nimport Filter, { FilterState, defaultConcept, Subgroup } from './Filter';\nimport Configuration, {\n  ControlsState,\n  initialDiagramType,\n  Visit,\n} from './Controls';\nimport { Figure } from 'react-plotly.js';\n\n// CONFIG\n\nexport const initialControls = {\n  identifier: '',\n  type: initialDiagramType,\n  attX: '',\n  attY: '',\n  attC: '',\n  dt: 0,\n  visit: Visit.all,\n  followup: 0,\n  tolerance: 0,\n  norm: false,\n  stack: false,\n  fit: false,\n  legend: true,\n  bins: 0,\n};\n\n// PROPS\n\ninterface Props {}\n\nconst Viewer: React.FunctionComponent<Props> = (props) => {\n  // STATES\n\n  // errorState\n  const [errorState, setErrorState] = useState<string>('');\n\n  // viewerState\n  const initialViewerState = {\n    controlsVisible: false,\n    filtersVisible: true,\n    activePlot: '',\n  };\n  const [viewerState, setViewerState] = useState<{\n    controlsVisible: boolean;\n    filtersVisible: boolean;\n    activePlot: string;\n  }>(initialViewerState);\n  useEffect(() => {\n    localStorage.setObjectItem('grid.layouts', gridLayoutsState);\n    forceResize();\n  }, [viewerState]);\n\n  // gridLayoutsState\n  const [gridLayoutsState, setGridLayoutsState] = useState<\n    ReactGridLayout.Layouts\n  >(localStorage.getObjectItem('grid.layouts') ?? {});\n  useEffect(() => {\n    localStorage.setObjectItem('grid.layouts', gridLayoutsState);\n    forceResize();\n  }, [gridLayoutsState]);\n\n  // gridItemsState\n  const [gridItemsState, setGridItemsState] = useState<\n    ReactGridLayout.Layout[]\n  >(\n    (localStorage.getObjectItem('grid.items') ?? [])\n      // Workaround for bug in layout serialization - Infinity (and possibly others) gets saved as null\n      .map((item: ReactGridLayout.Layout) => {\n        return { ...item, y: item.y ?? Infinity };\n      })\n  );\n  useEffect(() => {\n    localStorage.setObjectItem('grid.items', gridItemsState);\n  }, [gridItemsState]);\n\n  // gridResponsiveState\n  const initialResponsiveState = { breakpoint: '', cols: 12 };\n  const [gridResponsiveState, setGridResponsiveState] = useState<{\n    breakpoint: string;\n    cols: number;\n  }>(initialResponsiveState);\n  useEffect(() => {\n    forceResize();\n  }, [gridResponsiveState]);\n\n  // filterState\n  const defaultFilterState: FilterState = {\n    concept: defaultConcept,\n    constraints: [],\n  };\n\n  const [filterState, setFilterState] = useState<FilterState>(\n    localStorage.getObjectItem('filter') ?? defaultFilterState\n  );\n  useEffect(() => {\n    localStorage.setObjectItem('filter', filterState);\n  }, [filterState]);\n\n  // subgroupsState\n  const [subgroupsState, setSubgroupsState] = useState<Subgroup[]>(\n    localStorage.getObjectItem('subgroups') ?? []\n  );\n  useEffect(() => {\n    localStorage.setObjectItem('subgroups', subgroupsState);\n  }, [subgroupsState]);\n\n  // plotControlsState\n  interface PlotControlsState {\n    [key: string]: { controls: ControlsState };\n  }\n\n  const [plotControlsState, setPlotControlsState] = useState<PlotControlsState>(\n    localStorage.getObjectItem('controls') ?? {}\n  );\n  useEffect(() => {\n    localStorage.setObjectItem('controls', plotControlsState);\n  }, [plotControlsState]);\n\n  // plotsState\n  interface PlotState {\n    data: Plotly.Data[];\n    layout: Partial<Plotly.Layout>;\n  }\n  const [plotsState, setPlotsState] = useState<{ [key: string]: PlotState }>(\n    localStorage.getObjectItem('plots') ?? {}\n  );\n  useEffect(() => {\n    localStorage.setObjectItem('plots', plotsState);\n  }, [plotsState]);\n\n  // updatingState\n  interface UpdatingState {\n    [key: string]: boolean;\n  }\n  const [updatingState, setUpdatingState] = useState<UpdatingState>({});\n\n  // HANDLERS\n\n  const onGridBreakpointChange = (breakpoint: string, cols: number) => {\n    setGridResponsiveState({\n      breakpoint: breakpoint,\n      cols: cols,\n    });\n  };\n\n  const onViewerConfigurationToggle = () => {\n    setViewerState({\n      ...viewerState,\n      controlsVisible: !viewerState.controlsVisible,\n    });\n  };\n\n  const onViewerFilterToggle = () => {\n    setViewerState({\n      ...viewerState,\n      filtersVisible: !viewerState.filtersVisible,\n    });\n  };\n\n  const onGridLayoutChange = (\n    layout: ReactGridLayout.Layout[],\n    layouts: ReactGridLayout.Layouts\n  ) => {\n    setGridLayoutsState(layouts);\n  };\n\n  const onGridItemAdd = () => {\n    const identifier = utilities.generateIdentifier();\n    const newIdentifiers = [...Object.keys(plotsState), identifier];\n    backend\n      .sessionInit(newIdentifiers)\n      .then(() => {\n        setGridItemsState([...gridItemsState, createGridItem(identifier)]);\n        setPlotControlsState({\n          ...plotControlsState,\n          ...{ [identifier]: createInitialPlotControlsState(identifier) },\n        });\n        setPlotsState({\n          ...plotsState,\n          ...{ [identifier]: { data: [], layout: {} } },\n        });\n        setViewerState({\n          ...viewerState,\n          activePlot: identifier,\n          controlsVisible: true,\n        });\n      })\n      .catch(handleError);\n  };\n\n  const onGridItemRemove = (identifier: string) => {\n    const newPlotsState = { ...plotsState };\n    delete newPlotsState[identifier];\n    backend\n      .sessionInit(Object.keys(newPlotsState))\n      .then(() => {\n        setGridItemsState(\n          gridItemsState.filter(\n            (item: ReactGridLayout.Layout) => item.i !== identifier\n          )\n        );\n        setPlotsState(newPlotsState);\n        const newPlotControlsState = { ...plotControlsState };\n        delete newPlotControlsState[identifier];\n        setPlotControlsState(newPlotControlsState);\n        if (viewerState.activePlot === identifier) {\n          setViewerState({\n            ...viewerState,\n            activePlot: '',\n            controlsVisible: false,\n          });\n        }\n      })\n      .catch(handleError);\n  };\n\n  const onGridItemEdit = (identifier: string) => {\n    setViewerState({\n      ...viewerState,\n      activePlot: identifier,\n      controlsVisible: true,\n    });\n  };\n\n  const onReset = () => {\n    backend\n      .sessionReset()\n      .then(() => {\n        setViewerState(initialViewerState);\n        setGridResponsiveState(initialResponsiveState);\n        localStorage.setObjectItem('grid.layouts', {});\n        setGridLayoutsState({});\n        localStorage.setObjectItem('grid.items', []);\n        setGridItemsState([]);\n        localStorage.setObjectItem('filter', defaultFilterState);\n        setFilterState(defaultFilterState);\n        localStorage.setObjectItem('controls', {});\n        setPlotControlsState({});\n        localStorage.setObjectItem('plots', {});\n        setPlotsState({});\n      })\n      .catch(handleError);\n  };\n\n  const onPlotSelected = (\n    identifier: string,\n    range: Plotly.SelectionRange | undefined\n  ) => {\n    if (!range) {\n      return;\n    }\n\n    setUpdating();\n    const newFilterState: FilterState = {\n      ...filterState,\n      constraints: [\n        ...filterState.constraints,\n        {\n          attribute: plotControlsState[identifier].controls.attX,\n          lower: range.x[0],\n          upper: range.x[1],\n          items: [],\n        },\n        {\n          attribute: plotControlsState[identifier].controls.attY,\n          lower: range.y[0],\n          upper: range.y[1],\n          items: [],\n        },\n      ],\n    };\n    setFilterState(newFilterState);\n    utilities.devLog('new filters:', newFilterState);\n    backend\n      .filterUpdate(newFilterState)\n      .then((figures: { [key: string]: Partial<Figure> }) => {\n        handleFilterUpdateResponse(figures);\n      })\n      .catch(handleError);\n  };\n\n  const onFilterChanged = (filters: Partial<FilterState>) => {\n    setUpdating();\n    const newFilterState: FilterState = {\n      ...filterState,\n      ...filters,\n    };\n    setFilterState(newFilterState);\n    utilities.devLog('new filters:', newFilterState);\n    backend\n      .filterUpdate(newFilterState)\n      .then((figures: { [key: string]: Partial<Figure> }) => {\n        handleFilterUpdateResponse(figures);\n      })\n      .catch(handleError);\n  };\n\n  const onSubgroupDefine = (subgroup: Subgroup) => {\n    backend\n      .subgroupDefine(subgroup.name)\n      .then(() => {\n        setSubgroupsState([\n          ...subgroupsState.filter(\n            (_subgroup) => _subgroup.name !== subgroup.name\n          ),\n          subgroup,\n        ]);\n      })\n      .catch(handleError);\n  };\n\n  const onSubgroupDelete = (name: string) => {\n    alert('Not yet implemented in backend.');\n    setSubgroupsState([\n      ...subgroupsState.filter((subgroup) => subgroup.name !== name),\n    ]);\n  };\n  const onSubgroupActivate = (name: string) => {\n    const subgroup = subgroupsState.find((subgroup) => subgroup.name === name);\n    onFilterChanged({\n      ...filterState,\n      constraints: subgroup?.constraints,\n    });\n  };\n\n  const onControlsChanged = (\n    identifier: string,\n    controls: Partial<ControlsState>\n  ) => {\n    setUpdating(identifier);\n    const newControls: ControlsState = {\n      ...plotControlsState[identifier].controls,\n      ...controls,\n    };\n    const newPlotControls = {\n      ...plotControlsState,\n      ...{\n        [identifier]: {\n          ...plotsState[identifier],\n          controls: newControls,\n        },\n      },\n    };\n    setPlotControlsState(newPlotControls);\n    utilities.devLog('new controls:', newControls);\n    backend\n      .controlsUpdate(newPlotControls[identifier].controls)\n      .then((figure: Partial<Figure>) => {\n        handleControlsUpdateResponse(identifier, figure);\n      })\n      .catch(handleError);\n  };\n\n  // HELPER (see first part above)\n\n  const handleError = (error: any) => {\n    console.log(error);\n    try {\n      setErrorState(`${error.toJSON().name}: ${error.toJSON().message}`);\n    } catch (e) {\n      setErrorState('ERROR: unknown');\n    }\n  };\n\n  const handleControlsUpdateResponse = (\n    identifier: string,\n    figure: Partial<Figure>\n  ) => {\n    setPlotsState({\n      ...plotsState,\n      [identifier]: {\n        ...plotsState[identifier],\n        data: figure.data || [],\n        layout: figure.layout || {},\n      },\n    });\n    utilities.devLog(identifier, 'done');\n    setUpdatingState({\n      ...updatingState,\n      [identifier]: false,\n    });\n  };\n\n  const handleFilterUpdateResponse = (figures: {\n    [key: string]: Partial<Figure>;\n  }) => {\n    const identifiers = Object.keys(figures);\n    const newPlotsState = { ...plotsState };\n    const newUpdatingState = { ...updatingState };\n    identifiers.forEach((identifier) => {\n      newPlotsState[identifier] = {\n        data: figures[identifier].data || [],\n        layout: figures[identifier].layout || {},\n      };\n      newUpdatingState[identifier] = false;\n    });\n    setPlotsState(newPlotsState);\n    setUpdatingState(newUpdatingState);\n  };\n\n  const forceResize = () => {\n    // Workaround to trigger plot resize\n    window.dispatchEvent(new Event('resize'));\n  };\n\n  const createGridItem = (identifier: string): ReactGridLayout.Layout => {\n    return {\n      i: identifier,\n      x: (gridItemsState.length * 5) % gridResponsiveState.cols,\n      y: Infinity,\n      w: 5,\n      h: 4,\n    };\n  };\n\n  const createInitialPlotControlsState = (\n    identifier: string\n  ): { controls: ControlsState } => {\n    return { controls: { ...initialControls, identifier } };\n  };\n\n  const setUpdating = (identifier?: string) => {\n    if (identifier) {\n      setUpdatingState({\n        ...updatingState,\n        [identifier]: true,\n      });\n    } else {\n      const newState: UpdatingState = {};\n      Object.keys(plotControlsState).forEach((identifier) => {\n        newState[identifier] = true;\n      });\n      setUpdatingState(newState);\n    }\n  };\n\n  // RENDER\n\n  const createGridItemElement = (item: ReactGridLayout.Layout) => {\n    return (\n      <div\n        key={item.i}\n        data-grid={item}\n        className={`box ${\n          viewerState.activePlot === item.i ? ' box--active' : ''\n        } column`}\n      >\n        <div className='row grid--draggable'>\n          <span className='text'>{item.i}</span>\n          <span\n            className='grid__item--close'\n            onClick={() => {\n              onGridItemRemove(item.i);\n            }}\n          >\n            x\n          </span>\n          <span\n            className='grid__item--edit'\n            onClick={() => {\n              onGridItemEdit(item.i);\n            }}\n          >\n            edit\n          </span>\n          {updatingState[item.i] ? (\n            <span className='grid__item--updating'>updating ...</span>\n          ) : null}\n        </div>\n        <Plot\n          identifier={item.i}\n          data={plotsState[item.i]?.data}\n          layout={plotsState[item.i]?.layout}\n          onSelected={onPlotSelected}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <Fragment>\n      <div className='navigation navigation--secondary'>\n        <ul>\n          <li>\n            <button\n              onClick={onGridItemAdd}\n              className='navigation__item'\n              title='Add new diagram'\n            >\n              Add\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={onViewerConfigurationToggle}\n              className='navigation__item'\n              title='Toggle configuration panel'\n            >\n              Configuration\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={onViewerFilterToggle}\n              className='navigation__item'\n              title='Toggle filter panel'\n            >\n              Filter\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={forceResize}\n              className='navigation__item'\n              title='Force resize'\n            >\n              Resize\n            </button>\n          </li>\n          <li>\n            <button\n              onClick={onReset}\n              className='navigation__item'\n              title='Reset session'\n            >\n              Reset session\n            </button>\n          </li>\n        </ul>\n      </div>\n      {errorState !== '' ? (\n        <div className='error'>\n          {errorState}\n          <span\n            className='error--close'\n            onClick={() => {\n              setErrorState('');\n            }}\n          >\n            x\n          </span>\n        </div>\n      ) : null}\n      <div className='row'>\n        {viewerState.controlsVisible ? (\n          <Configuration\n            controls={plotControlsState[viewerState.activePlot]?.controls}\n            onControlsChanged={onControlsChanged}\n          />\n        ) : null}\n        <Grid\n          breakpointCols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n          rowHeight={100}\n          layouts={gridLayoutsState}\n          onBreakpointChange={onGridBreakpointChange}\n          onLayoutChange={onGridLayoutChange}\n        >\n          {gridItemsState.map((item: ReactGridLayout.Layout) =>\n            createGridItemElement(item)\n          )}\n        </Grid>\n        {viewerState.filtersVisible ? (\n          <Filter\n            filter={filterState}\n            subgroups={subgroupsState}\n            onFilterChanged={onFilterChanged}\n            onSubgroupDefine={onSubgroupDefine}\n            onSubgroupDelete={onSubgroupDelete}\n            onSubgroupActivate={onSubgroupActivate}\n          />\n        ) : null}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Viewer;\n","import React from 'react';\n\ninterface Props {}\n\nconst NotFound: React.StatelessComponent<Props> = (props) => <h1>Not found</h1>;\n\nexport default NotFound;\n","import React, { Fragment } from 'react';\nimport {\n  Route,\n  NavLink,\n  BrowserRouter as Router,\n  Switch,\n} from 'react-router-dom';\nimport Home from './components/Home';\nimport Viewer from './containers/Viewer';\nimport NotFound from './components/NotFound';\n\nconst routing = (\n  <Router basename={'/react-viewer/'}>\n    <Fragment>\n      <div className='navigation'>\n        <ul>\n          <li>\n            <NavLink\n              exact\n              className='navigation__item'\n              activeClassName='navigation__item--active'\n              to={`${process.env.PUBLIC_URL}/`}\n            >\n              Home\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              className='navigation__item'\n              activeClassName='navigation__item--active'\n              to={`${process.env.PUBLIC_URL}/viewer`}\n            >\n              Viewer\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n      <Switch>\n        <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home} />\n        <Route exact path={`${process.env.PUBLIC_URL}/viewer`} component={Viewer} />\n        <Route component={NotFound} />\n      </Switch>\n    </Fragment>\n  </Router>\n);\n\nexport default routing;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport routing from './routing';\n\nReactDOM.render(routing, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}